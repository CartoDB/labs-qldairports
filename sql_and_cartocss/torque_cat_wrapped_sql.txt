"select *, (CASE WHEN \"flight_type\" = 'Domestic' THEN 1 WHEN \"flight_type\" = 'International' THEN 2 ELSE 3 END) as torque_category FROM (with -- first data, main cities of the world\ndata as (\n  select * from athompson.flight_cube_query_09_06_15_dests_corrected\n  where\n    calendaryear = 2010  AND -- change the year\n    calendarmonth IN ('April') -- change the month\n), -- from OOL and others\norigin as (\n  select * from athompson.flight_cube_query_09_06_15_origins where cartodb_id = 1753 -- change the id based on airport\n), -- get cities closer to 14000 Km\ndests as (\n  select d.*,\n  (ST_Distance(\n    o.the_geom::geography, \n    d.the_geom::geography \n  ))/1000::int distance\n  from data d, origin o\n), -- generate lines using the geographic maxmimum circle\nlines as(\n  select\n  dests.cartodb_id, dests.calendarmonth, dests.calendaryear, dests.city_pair, dests.flight_type, dests.load, dests.distance,\n  ST_Transform(\n     ST_Segmentize(\n       ST_MakeLine(\n         ST_Transform(origin.the_geom, 953027),\n         ST_Transform(dests.the_geom, 953027)\n       ), \n       100000\n     ), \n    3857 \n   ) the_geom_webmercator\n  from origin,dests\n), -- steps to interpolate, 300 per route, from 0 to 1\nsteps as (\n  select lines.cartodb_id,\n    generate_series(0, 300, 1 )/300.0 step\n  from lines\n) -- finally the points over lines\nselect\n  -- fake autonum\n  row_number() over (partition by 1) cartodb_id,\n  -- fake category (needed by torque)\n  lines.city_pair, lines.flight_type, 1 as fakecat,\n  -- calculate the timing of each point starting with this date\n  timestamp '2015-08-23 10:00'\n    -- they will all arrive _almost_ at the same time\n    -- to the destiny (1 hour would be same time)\n    - interval '45 minutes' * (lines.distance/1000.0)\n    -- some random exit distribution using modulus\n    + interval '1 hour' * (lines.cartodb_id % 15)\n    -- actual distribution across the line at 1000km/h speed\n    + interval '1 hour' * (steps.step*lines.distance/(1000.0)) faketime ,\n  -- get a point on the line using the step\n  ST_LineInterpolatePoint(\n    lines.the_geom_webmercator,\n    steps.step\n  ) the_geom_webmercator\nfrom lines\njoin steps on lines.cartodb_id = steps.cartodb_id\norder by steps.step) _cdb_wrap"